loginUser() {
    const { email, password } = this.loginForm.value;
    this.authService.loginUser(email as string, password as string).subscribe(
    response => {
    console.log('Login successful. Token:', response.token);
    if (response.token) {
    sessionStorage.setItem('token', response.token);
    this.router.navigate(['/home']);
    } else {
    console.error('Token not received in the response.');
    this.msgService.add({ severity: 'error', summary: 'Error', detail: 'Invalid credentials' });
    }
    },
    error => {
    console.error('Error during login:', error);
    this.msgService.add({ severity: 'error', summary: 'Error', detail: 'Something went wrong' });
    }
    );
    }



    private baseUrl = 'http://localhost:3000';


  constructor(private http: HttpClient) { }

  registerUser(userDetails: User): Observable<any> {
    return this.http.post(`${this.baseUrl}/register`, userDetails);
  }

  loginUser(email: string, password: string): Observable<any> {
    const loginCredentials = {email, password};
    return this.http.post(`${this.baseUrl}/login`, loginCredentials);
  }


  

  loginUser() {
    const { email, password } = this.loginForm.value;
    this.authService.getUserByEmail(email as string).subscribe(
      response => {
        if (response.length > 0 && response[0].password === password) {
          sessionStorage.setItem('email', email as string);
          this.router.navigate(['/home']);
        } else {
          this.msgService.add({ severity: 'error', summary: 'Error', detail: 'email or password is wrong' });
        }
      },
      error => {
        this.msgService.add({ severity: 'error', summary: 'Error', detail: 'Something went wrong' });
      }

    )
  }